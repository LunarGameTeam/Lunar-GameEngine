From 4d83cd5e9c5f3546ca573d7a2911085083ab3d2c Mon Sep 17 00:00:00 2001
From: isakwong <isakwong@outlook.com>
Date: Fri, 13 Jan 2023 18:21:28 +0800
Subject: [PATCH 2/2] =?UTF-8?q?=E7=BC=96=E8=BE=91=E5=99=A8=E8=BF=AD?=
 =?UTF-8?q?=E4=BB=A3=EF=BC=8C=E6=94=AF=E6=8C=81HotReload?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 config.ini                          |   4 +-
 editor/core/editor.py               |  27 +++---
 editor/core/editor_module.py        | 136 +++++++++++++-------------
 editor/core/hot_patch.py            |  97 +++++++++++++++++++
 editor/main.py                      |  12 ++-
 editor/property_editor/__init__.py  |   0
 editor/pycharm_main.py              |   2 +-
 editor/ui/hierarchy_panel.py        |   6 +-
 editor/ui/imgui_demo.py             |   4 +-
 editor/ui/inspector_panel.py        |   6 +-
 editor/ui/library_panel.py          |   6 +-
 editor/ui/main_panel.py             | 130 -------------------------
 editor/ui/main_window.py            | 135 ++++++++++++++++++++++++++
 editor/ui/panel.py                  | 145 +++++++++++++++++++++++++---
 editor/ui/scene_panel.py            |   6 +-
 layout.ini                          |  89 +++++++++++++++++
 src/core/Scripting/binding_traits.h   |  21 ++--
 src/core/Scripting/function_wrap.h    |   4 +-
 src/core/Framework/luna_core.cpp    |   8 +-
 src/core/Framework/luna_core.h      |   4 +-
 src/core/Math/math_binding.cpp      |   9 ++
 src/imgui_binding/imgui_binding.cpp |  36 ++++++-
 src/Graphics/render_module.cpp        |   9 +-
 23 files changed, 632 insertions(+), 264 deletions(-)
 create mode 100644 editor/core/hot_patch.py
 create mode 100644 editor/property_editor/__init__.py
 delete mode 100644 editor/ui/main_panel.py
 create mode 100644 editor/ui/main_window.py
 create mode 100644 layout.ini

diff --git a/config.ini b/config.ini
index 3051f7e..9c90ce0 100644
--- a/config.ini
+++ b/config.ini
@@ -3,8 +3,8 @@
       "RenderDeviceType" : "Vulkan"
    },
    "Start" : {
-      "DefaultProject" : "G:/Lunar-GameEngine/Lunar-Default-Demo",
-      "DefaultScene" : "/assets/test.scn",
+      "DefaultProject" : "",
+      "DefaultScene" : "",
       "InitScript" : "/editor/main.py",
       "PythonHome" : "C:/Program Files/Python311"
    },
diff --git a/editor/core/editor.py b/editor/core/editor.py
index 9bca8c0..5c0d8f9 100644
--- a/editor/core/editor.py
+++ b/editor/core/editor.py
@@ -1,9 +1,8 @@
 import typing
-from typing import Type, List, Any
 
 import luna
 from core.editor_module import asset_module
-from luna import LObject, imgui, ObjAsset
+from luna import imgui
 
 editors = dict()
 
@@ -16,7 +15,12 @@ def register_type_editor(cls):
 
 def get_type_editor(cls):
     global editors
-    return editors.get(cls, None)
+    base = cls
+    while base:
+        if base in editors:
+            return editors.get(base)
+        base = base.__base__
+    return None
 
 
 def create_editor(target):
@@ -31,11 +35,11 @@ class EditorBase(object):
     target_type = luna.LObject
 
     def __init__(self, target):
-        super(EditorBase, self).__init__()
+        super().__init__()
         self.target = target
         self.child_editor_list = self.create_child_editor()
         self.indent = 0
-        
+
     def imgui_obj_property(self, comp, prop_name, prop_type):
         if prop_name == "name":
             return
@@ -94,7 +98,7 @@ class EntityEditor(EditorBase):
     target: luna.Entity
 
     def __init__(self, target):
-        super(EntityEditor, self).__init__(target)
+        super().__init__(target)
 
     def on_imgui(self):
         for it in self.child_editor_list:
@@ -112,7 +116,8 @@ class EntityEditor(EditorBase):
 
         for i in range(0, self.target.component_count):
             comp = self.target.get_component_at(i)
-            editor = ComponentEditor(comp)
+            editor_type = get_type_editor(comp.__class__)
+            editor = editor_type(editor)
             editor.indent = indent
             child_editor.append(editor)
         return child_editor
@@ -123,7 +128,7 @@ class ComponentEditor(EditorBase):
     target_type = luna.Component
 
     def __init__(self, target):
-        super(ComponentEditor, self).__init__(target)
+        super().__init__(target)
 
     def component_category(self):
         comp_name = self.target.__class__.__name__
@@ -147,13 +152,11 @@ class MeshRendererEditor(ComponentEditor):
     target: 'luna.MeshRenderer' = None
 
     def __init__(self, target):
-        super(MeshRendererEditor, self).__init__(target)
+        super().__init__(target)
 
     def on_imgui(self):
         mat_list: 'list[luna.MaterialInstance]' = self.target.material
         mesh: 'luna.ObjAsset' = self.target.mesh
         if self.component_category():
             self.imgui_obj_property(self.target, "mesh", luna.ObjAsset)
-            
-            
-
+            mat_instance = self.target.material
diff --git a/editor/core/editor_module.py b/editor/core/editor_module.py
index b144ab4..ed063dc 100644
--- a/editor/core/editor_module.py
+++ b/editor/core/editor_module.py
@@ -1,78 +1,80 @@
-from luna import *
+import time
+
+from core.hot_patch import reload_module
 import luna
+from luna import *
+from ui.panel import WindowBase
 
 asset_module: 'luna.AssetModule' = luna.get_module(luna.AssetModule)
 render_module: 'luna.RenderModule' = luna.get_module(luna.RenderModule)
-scene_module: 'luna.GameModule' = luna.get_module(luna.GameModule)
+game_module: 'luna.GameModule' = luna.get_module(luna.GameModule)
 platform_module: 'luna.PlatformModule' = luna.get_module(luna.PlatformModule)
 
 
 def update_asset(path, asset_type):
-	asset = asset_module.load_asset(path, asset_type)
-	asset_module.save_asset(asset, path)
+    asset = asset_module.load_asset(path, asset_type)
+    asset_module.save_asset(asset, path)
 
 
 class EditorModule(luna.LModule):
-	_instance = None
-
-	def __init__(self):
-		super(EditorModule, self).__init__()
-		self.editor_list = []
-		self.project_dir = ""
-		if False:
-			update_asset("/assets/test.scn", luna.Scene)
-			update_asset("/assets/built-in/skybox/skybox.mat", luna.MaterialTemplateAsset)
-			update_asset("/assets/built-in/skybox/sky_box.cubemap", luna.TextureCube)
-			update_asset("/assets/built-in/pbr.mat", luna.MaterialTemplateAsset)
-
-	def on_load(self):
-		pass
-
-	def on_init(self):
-
-		from ui.hierarchy_panel import HierarchyPanel
-		from ui.main_panel import MainPanel
-		from ui.inspector_panel import InspectorPanel
-		from ui.scene_panel import ScenePanel
-		from ui.library_panel import LibraryPanel
-		from ui.imgui_demo import DemoPanel
-		from ui.main_panel import generate_doc_for_module
-
-		global asset_module, scene_module, render_module, platform_module
-
-		self.hierarchy_panel = HierarchyPanel()
-		self.demo_panel = DemoPanel()
-		self.main_panel = MainPanel()
-		self.scene_panel = ScenePanel()
-		self.library_panel = LibraryPanel()
-		self.inspector_panel = InspectorPanel()
-
-		self.editor_list.append(self.main_panel)
-		self.editor_list.append(self.hierarchy_panel)
-		self.editor_list.append(self.scene_panel)
-		self.editor_list.append(self.library_panel)
-		self.editor_list.append(self.inspector_panel)
-		self.editor_list.append(self.demo_panel)
-
-		generate_doc_for_module(luna)
-
-		self.project_dir = luna.get_config("DefaultProject")
-		self.default_scene = luna.get_config("DefaultScene")
-		if self.default_scene and self.project_dir:
-
-			scn = asset_module.load_asset(self.default_scene, luna.Scene)
-			self.main_panel.set_main_scene(scn)
-
-	def on_tick(self, delta_time):
-		pass
-
-	def on_imgui(self):
-		for e in self.editor_list:
-			e.do_imgui()
-
-	@staticmethod
-	def instance() -> 'EditorModule':
-		if EditorModule._instance is None:
-			EditorModule._instance = EditorModule()
-
-		return EditorModule._instance
+    main_panel: 'WindowBase'
+    _instance = None
+
+    def __init__(self):
+        super().__init__()
+
+        self.project_dir = luna.get_config("DefaultProject")
+        self.default_scene = luna.get_config("DefaultScene")
+        self.main_panel = None
+        self.now = time.time()
+        self.reload_module = set()
+
+        if False:
+            update_asset("/assets/test.scn", luna.Scene)
+            update_asset("/assets/built-in/skybox/skybox.mat", luna.MaterialTemplateAsset)
+            update_asset("/assets/built-in/skybox/sky_box.cubemap", luna.TextureCube)
+            update_asset("/assets/built-in/pbr.mat", luna.MaterialTemplateAsset)
+
+    def on_load(self):
+        pass
+
+    def on_init(self):
+
+        from ui.main_window import MainPanel
+        from ui.main_window import generate_doc_for_module
+
+        global asset_module, game_module, render_module, platform_module
+
+        self.main_panel: 'MainPanel' = MainPanel()
+
+        generate_doc_for_module(luna)
+
+        if not self.project_dir:
+            self.main_panel.show_message_box("提示", "请点击文件打开项目")
+        elif not self.default_scene:
+            self.main_panel.show_message_box("提示", "请点击文件打开默认场景")
+
+        if self.default_scene and self.project_dir:
+            scn = asset_module.load_asset(self.default_scene, luna.Scene)
+            self.main_panel.set_main_scene(scn)
+
+    def on_tick(self, delta_time):
+        pass
+
+    def on_imgui(self):
+        if self.reload_module:
+            for m in self.reload_module:
+                reload_module(m)
+            self.reload_module.clear()
+            self.main_panel.show_status("重载Python代码")
+        now = time.time()
+        delta = now - self.now
+        self.main_panel.do_imgui(delta)
+        self.now = now
+
+    @staticmethod
+    def instance() -> 'EditorModule':
+        if EditorModule._instance is None:
+            EditorModule._instance = EditorModule()
+
+        return EditorModule._instance
diff --git a/editor/core/hot_patch.py b/editor/core/hot_patch.py
new file mode 100644
index 0000000..4005b78
--- /dev/null
+++ b/editor/core/hot_patch.py
@@ -0,0 +1,97 @@
+import importlib
+import inspect
+import os
+import types
+
+from watchdog.events import FileSystemEventHandler
+from watchdog.observers import Observer
+
+
+class FileModifyHandler(FileSystemEventHandler):
+    def __init__(self, p):
+        super().__init__()
+        self.watch_path = p
+
+    def on_modified(self, event):
+        if "__pycache__" in event.src_path or event.src_path.endswith('~') or event.is_directory:
+            return
+
+        from core.editor_module import EditorModule
+
+        p = os.path.relpath(event.src_path, self.watch_path)
+        module_name = p.replace("\\", ".")
+        module_name = module_name.split(".py")[0]
+        m = importlib.import_module(module_name)
+        if m not in EditorModule.instance().reload_module:
+            EditorModule.instance().reload_module.add(m)
+
+
+def watch_scripts(dir_path):
+    event_handler = FileModifyHandler(dir_path)
+    observer = Observer()
+    observer.schedule(event_handler, dir_path, recursive=True)
+    observer.start()
+
+
+def update_fun(old_fun, new_fun, update_cell_depth=2):
+    old_cell_num = 0
+    if old_fun.__closure__:
+        old_cell_num = len(old_fun.__closure__)
+    new_cell_num = 0
+    if new_fun.__closure__:
+        new_cell_num = len(new_fun.__closure__)
+
+    if old_cell_num != new_cell_num:
+        return False
+
+    setattr(old_fun, '__code__', new_fun.__code__)
+    setattr(old_fun, '__defaults__', new_fun.__defaults__)
+    setattr(old_fun, '__doc__', new_fun.__doc__)
+    setattr(old_fun, '__dict__', new_fun.__dict__)
+
+    if not (update_cell_depth and old_cell_num):
+        return True
+
+    # for index, cell in enumerate(old_fun.__closure__):
+    # 	if isinstance(cell, types.CellType):
+    # 		update_fun(old_fun.__closure__[index], new_fun.__closure__[index], update_cell_depth - 1)
+
+    return True
+
+
+def update_type(old_class, new_class):
+    for name, attr in old_class.__dict__.items():  # delete function
+        if name in new_class.__dict__:
+            continue
+        type.__delattr__(old_class, name)
+
+    for name, attr in new_class.__dict__.items():
+        if name not in old_class.__dict__:  # new attribute
+            setattr(old_class, name, attr)
+            continue
+
+        old_attr = old_class.__dict__[name]
+        new_attr = attr
+
+        if isinstance(old_attr, types.FunctionType) and isinstance(new_attr, types.FunctionType):
+            if not update_fun(old_attr, new_attr):
+                setattr(old_class, name, new_attr)
+
+
+def reload_module(m):
+    old_m = m
+    members = inspect.getmembers(old_m, inspect.isclass)
+    new_m = importlib.reload(old_m)
+    old_cls_map = dict()
+    for old_name, old_cls in members:
+        old_cls_map[old_name] = old_cls
+        if old_cls.__module__ == old_m.__name__:
+            new_cls = new_m.__dict__[old_cls.__name__]
+            update_type(old_cls, new_cls)
+
+    new_members = inspect.getmembers(new_m, inspect.isclass)
+    # attrs = dict(new_m.__dict__)
+    for new_name, new_cls in new_members:
+        if new_cls.__module__ == new_m.__name__:
+            if new_name in old_cls_map:
+                setattr(new_m, new_name, old_cls_map.get(new_name))
diff --git a/editor/main.py b/editor/main.py
index 6a87e29..4f27e46 100644
--- a/editor/main.py
+++ b/editor/main.py
@@ -1,3 +1,4 @@
+import importlib
 import os
 import sys
 
@@ -5,6 +6,7 @@ import sys
 work_dir = os.getcwd()
 bin_dir = os.path.dirname(sys.executable)
 editor_dir = work_dir + "\\editor"
+packages_dir = work_dir + "\\third-party\\site-packages"
 
 
 def init_editor():
@@ -23,6 +25,10 @@ def init_editor():
     import luna
 
     sys.path.append(editor_dir)
+    sys.path.append(packages_dir)
+
+    from core.hot_patch import watch_scripts
+    watch_scripts(editor_dir)
 
     luna.load_library("imgui_binding.dll")
     luna.load_library("game.dll")
@@ -34,7 +40,8 @@ def init_editor():
     binding_test()
 
     from core.editor_module import EditorModule
-    luna.load_module(EditorModule.instance())
+    luna.add_module(EditorModule.instance())
+
     app.main_loop()
 
 
@@ -43,7 +50,4 @@ if __name__ == '__main__':
     import luna
 
     luna.add_library_dir(bin_dir)
-    is_looping = True
     init_editor()
-
-
diff --git a/editor/property_editor/__init__.py b/editor/property_editor/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/editor/pycharm_main.py b/editor/pycharm_main.py
index 848eb67..e779a7a 100644
--- a/editor/pycharm_main.py
+++ b/editor/pycharm_main.py
@@ -10,7 +10,7 @@ editor_dir = work_dir + "\\editor"
 if __name__ == '__main__':
     sys.path.append(bin_dir)
     import luna
+
     luna.add_library_dir(bin_dir)
     is_looping = True
     init_editor()
-
diff --git a/editor/ui/hierarchy_panel.py b/editor/ui/hierarchy_panel.py
index c2d2add..a4d61be 100644
--- a/editor/ui/hierarchy_panel.py
+++ b/editor/ui/hierarchy_panel.py
@@ -1,4 +1,3 @@
-import os
 import luna
 from core.editor_module import EditorModule
 from luna import imgui
@@ -7,14 +6,14 @@ from ui.panel import PanelBase
 
 class HierarchyPanel(PanelBase):
     def __init__(self) -> None:
-        super(HierarchyPanel, self).__init__()
+        super().__init__()
         self.scene = None
         self.title = "场景树"
 
     def set_scene(self, scene):
         self.scene = scene
 
-    def on_imgui(self) -> None:
+    def on_imgui(self, delta_time) -> None:
         # super(PyHierarchyEditor, self).on_imgui()
         if not self.scene:
             return
@@ -35,7 +34,6 @@ class HierarchyPanel(PanelBase):
             luna.imgui.push_id(id(entity))
             if imgui.begin_popup_context_item(0, imgui.ImGuiPopupFlags_MouseButtonRight):
                 if imgui.menu_item("删除"):
-
                     to_destroy_entity.add(entity)
 
                 imgui.end_popup()
diff --git a/editor/ui/imgui_demo.py b/editor/ui/imgui_demo.py
index 28fb244..914cd92 100644
--- a/editor/ui/imgui_demo.py
+++ b/editor/ui/imgui_demo.py
@@ -5,12 +5,12 @@ from ui.panel import PanelBase
 
 class DemoPanel(PanelBase):
     def __init__(self) -> None:
-        super(DemoPanel, self).__init__()
+        super().__init__()
         self.scene = None
         self.title = "Demo"
 
     def set_scene(self, scene):
         self.scene = scene
 
-    def on_imgui(self) -> None:
+    def on_imgui(self, delta_time) -> None:
         luna.imgui.show_demo_window()
diff --git a/editor/ui/inspector_panel.py b/editor/ui/inspector_panel.py
index 749add0..ce0640c 100644
--- a/editor/ui/inspector_panel.py
+++ b/editor/ui/inspector_panel.py
@@ -10,7 +10,7 @@ class InspectorPanel(PanelBase):
     world_sys: luna.GameModule
 
     def __init__(self) -> None:
-        super(InspectorPanel, self).__init__()
+        super().__init__()
         self.title = "Inspector"
         self.selected_entity = None
         self.editor = None
@@ -22,8 +22,8 @@ class InspectorPanel(PanelBase):
     def imgui_menu(self):
         pass
 
-    def on_imgui(self) -> None:
-        super(InspectorPanel, self).on_imgui()
+    def on_imgui(self, delta_time) -> None:
+        super().on_imgui(delta_time)
         if self.editor and self.editor.target:
             self.editor.on_imgui()
         return
diff --git a/editor/ui/library_panel.py b/editor/ui/library_panel.py
index d4bee2b..e077391 100644
--- a/editor/ui/library_panel.py
+++ b/editor/ui/library_panel.py
@@ -31,7 +31,7 @@ class FolderInfo(FileInfo):
 
 class LibraryPanel(PanelBase):
     def __init__(self) -> None:
-        super(LibraryPanel, self).__init__()
+        super().__init__()
         self.title = "资源库"
         self.asset_path = os.path.join(luna.get_module(luna.PlatformModule).engine_dir, "assets")
         self.asset_root = FolderInfo(self.asset_path)
@@ -63,7 +63,7 @@ class LibraryPanel(PanelBase):
                 pass
             luna.imgui.tree_pop()
 
-    def on_imgui(self) -> None:
-        super(LibraryPanel, self).on_imgui()
+    def on_imgui(self, delta_time) -> None:
+        super().on_imgui(delta_time)
         for f in self.asset_root.child_list:
             self.on_imgui_folder(f)
diff --git a/editor/ui/main_panel.py b/editor/ui/main_panel.py
deleted file mode 100644
index c300e0b..0000000
--- a/editor/ui/main_panel.py
+++ /dev/null
@@ -1,130 +0,0 @@
-import inspect
-import os
-import tkinter.filedialog
-import types
-
-import luna
-from core.editor_module import platform_module, EditorModule, asset_module, scene_module
-from luna import imgui
-from ui.panel import PanelBase
-
-
-def generate_class_doc(cls: 'type'):
-    cls_doc = cls.__doc__ + "\n\n\n"
-    return cls_doc
-
-
-def generate_doc_for_module(target: 'types.ModuleType') -> object:
-    module_name = target.__name__
-    module_name = module_name.replace('.', '/')
-    p = "temp/{0}".format(module_name)
-    if not os.path.exists("temp"):
-        os.mkdir("temp")
-    if not os.path.exists(p):
-        os.mkdir(p)
-
-    header = ""
-    header += "import luna\n"
-    header += "import typing\n"
-    header += "from typing import *\n"
-    header += "T=typing.TypeVar(\"T\")\n"
-    header += "core : 'luna.LunaCore' = None\n"
-
-    doc = target.__doc__
-    for name, mem in inspect.getmembers(target):
-        if inspect.ismodule(mem):
-            my_module_name: str = mem.__name__
-            my_module_name = my_module_name.split('.')[-1]
-            header = header + "\nfrom luna import {0}\n".format(my_module_name)
-            generate_doc_for_module(mem)
-        elif inspect.isclass(mem):
-            class_doc = generate_class_doc(mem)
-            doc = doc + class_doc
-    try:
-        doc = header + doc
-        f = open(p + "/__init__.py", "w", encoding='utf-8')
-        f.write(doc)
-        f.close()
-    except OSError as err:
-        assert False
-    return
-
-
-class MainPanel(PanelBase):
-    main_scene: 'luna.Scene' = None
-
-    def __init__(self) -> None:
-        super(MainPanel, self).__init__()
-        self.title = "###Luna Editor"
-        self.main_scene = None
-        self.dialog_open = True
-
-    def format_title(self):
-        self.title = "{} Luna Editor   (Proj: {})   (Scene: {})###Luna Editor".format(imgui.ICON_FA_MOON, EditorModule.instance().project_dir,
-                                                  EditorModule.instance().default_scene)
-
-    def set_main_scene(self, scn):
-        if scn:
-            self.main_scene = scn
-            entity = scn.find_entity("MainCamera")
-            camera = entity.get_component(luna.CameraComponent)
-            scene_module.add_scene(scn)
-            EditorModule.instance().hierarchy_panel.set_scene(scn)
-            EditorModule.instance().scene_panel.set_scene(scn)
-
-    def do_imgui(self):
-        self.format_title()
-        window_module = luna.get_module(luna.WindowModule)
-        main_window = window_module.main_window
-        size = luna.LVector2f(main_window.width, main_window.height)
-        imgui.set_next_window_size(size, 0)
-        imgui.set_next_window_pos(luna.LVector2f(0, 0), 0, luna.LVector2f(0, 0))
-        exiting = False
-        imgui.push_style_vec2(imgui.ImGuiStyleVar_FramePadding, luna.LVector2f(16, 8))
-        exiting = not imgui.begin(self.title,
-                                  imgui.ImGuiWindowFlags_MenuBar | imgui.ImGuiWindowFlags_NoCollapse | imgui.ImGuiWindowFlags_NoBringToFrontOnFocus | imgui.ImGuiWindowFlags_NoMove,
-                                  True)
-        self.on_imgui()
-        imgui.pop_style_var(1)
-        imgui.dock_space(1, luna.LVector2f(0, 0), imgui.ImGuiDockNodeFlags_PassthruCentralNode)
-
-        imgui.end()
-        imgui.set_next_window_dock_id(1, imgui.ImGuiCond_FirstUseEver)
-        if exiting:
-            luna.exit()
-
-    def on_imgui(self) -> None:
-        super(MainPanel, self).on_imgui()
-        show, is_open = imgui.begin_popup_modal("提示", self.dialog_open, 0)
-        if show:
-            imgui.text("请打开游戏项目目录")
-            imgui.end_popup()
-
-        self.dialog_open = is_open
-
-        if self.dialog_open:
-            imgui.open_popup("提示", 0)
-
-        if imgui.begin_menu_bar():
-            if imgui.begin_menu("文件", True):
-                if imgui.menu_item("打开项目"):
-                    name = tkinter.filedialog.askdirectory(initialdir=platform_module.engine_dir)
-                    if name:
-                        platform_module.set_project_dir(name)
-                    pass
-                if imgui.menu_item("打开场景"):
-                    name = tkinter.filedialog.askopenfilename(filetypes=(("scene files", "*.scn"),),
-                                                              initialdir=platform_module.project_dir)
-                    if name:
-                        engine_path = os.path.relpath(name, platform_module.project_dir)
-                        luna.set_config("DefaultScene", engine_path)
-                        scn = asset_module.load_asset(engine_path, luna.Scene)
-                        self.set_main_scene(scn)
-                if imgui.menu_item("生成 Python API"):
-                    generate_doc_for_module(luna)
-                if imgui.menu_item("保存场景"):
-                    asset_module.save_asset(self.main_scene, self.main_scene.path)
-                if imgui.menu_item("退出"):
-                    exit(0)
-                imgui.end_menu()
-            imgui.end_menu_bar()
diff --git a/editor/ui/main_window.py b/editor/ui/main_window.py
new file mode 100644
index 0000000..7a67236
--- /dev/null
+++ b/editor/ui/main_window.py
@@ -0,0 +1,135 @@
+import inspect
+import os
+import tkinter.filedialog
+import types
+
+import luna
+from core.editor_module import platform_module, EditorModule, asset_module, game_module
+from luna import imgui
+from ui.panel import WindowBase
+
+
+def generate_class_doc(cls: 'type'):
+    cls_doc = cls.__doc__ + "\n\n\n"
+    return cls_doc
+
+
+def generate_doc_for_module(target: 'types.ModuleType') -> object:
+    module_name = target.__name__
+    module_name = module_name.replace('.', '/')
+    p = "temp/{0}".format(module_name)
+    if not os.path.exists("temp"):
+        os.mkdir("temp")
+    if not os.path.exists(p):
+        os.mkdir(p)
+
+    header = ""
+    header += "import luna\n"
+    header += "import typing\n"
+    header += "from typing import *\n"
+    header += "T=typing.TypeVar(\"T\")\n"
+    header += "core : 'luna.LunaCore' = None\n"
+
+    doc = target.__doc__
+    for name, mem in inspect.getmembers(target):
+        if inspect.ismodule(mem):
+            my_module_name: str = mem.__name__
+            my_module_name = my_module_name.split('.')[-1]
+            header = header + "\nfrom luna import {0}\n".format(my_module_name)
+            generate_doc_for_module(mem)
+        elif inspect.isclass(mem):
+            class_doc = generate_class_doc(mem)
+            doc = doc + class_doc
+    try:
+        doc = header + doc
+        f = open(p + "/__init__.py", "w", encoding='utf-8')
+        f.write(doc)
+        f.close()
+    except OSError as err:
+        assert False
+    return
+
+
+class MainPanel(WindowBase):
+    main_scene: 'luna.Scene' = None
+
+    def __init__(self) -> None:
+        super().__init__()
+
+        self.main_scene = None
+
+        from ui.hierarchy_panel import HierarchyPanel
+        from ui.inspector_panel import InspectorPanel
+        from ui.scene_panel import ScenePanel
+        from ui.library_panel import LibraryPanel
+        from ui.imgui_demo import DemoPanel
+
+        self.hierarchy_panel = self.add_panel(HierarchyPanel)
+        self.demo_panel = self.add_panel(DemoPanel)
+        self.scene_panel = self.add_panel(ScenePanel)
+        self.library_panel = self.add_panel(LibraryPanel)
+        self.inspector = self.add_panel(InspectorPanel)
+
+    def add_panel(self, panel_type: 'Type[T]') -> 'T':
+        panel = panel_type()
+        self.editor_list.append(panel)
+        return panel
+
+    def on_title(self):
+        proj_dir = EditorModule.instance().project_dir
+        scene_path = EditorModule.instance().default_scene
+        app_title = imgui.ICON_FA_MOON + "  Luna Editor"
+        self.title = "{}\t\t{}\t\t{}".format(app_title, proj_dir, scene_path)
+
+    def set_main_scene(self, scn):
+        if not scn:
+            return
+        self.show_status("打开场景: {}".format(scn.path))
+        self.main_scene = scn
+        game_module.add_scene(self.main_scene)
+        self.hierarchy_panel.set_scene(self.main_scene)
+        self.scene_panel.set_scene(self.main_scene)
+
+    def on_file_menu(self):
+        if imgui.begin_menu("文件", True):
+            if imgui.menu_item("打开项目"):
+                name = tkinter.filedialog.askdirectory(initialdir=platform_module.engine_dir)
+                if name:
+                    platform_module.set_project_dir(name)
+                pass
+            if imgui.menu_item("打开场景"):
+                name = tkinter.filedialog.askopenfilename(filetypes=(("scene files", "*.scn"),),
+                                                          initialdir=platform_module.project_dir)
+                if name:
+                    engine_path = os.path.relpath(name, platform_module.project_dir)
+                    luna.set_config("DefaultScene", engine_path)
+                    scn = asset_module.load_asset(engine_path, luna.Scene)
+                    self.set_main_scene(scn)
+            if imgui.menu_item("生成 Python API"):
+                self.show_status("生成PythonAPI中")
+                generate_doc_for_module(luna)
+            if imgui.menu_item("保存场景"):
+                asset_module.save_asset(self.main_scene, self.main_scene.path)
+            if imgui.menu_item("退出"):
+                exit(0)
+            imgui.end_menu()
+
+    def on_help_menu(self):
+        if imgui.begin_menu("帮助", True):
+            if imgui.menu_item("关于"):
+                self.show_message_box("Luna Editor 0.1", "made by Isak Wong, Pancy Star")
+            imgui.end_menu()
+
+    def on_tool_menu(self):
+        if imgui.begin_menu("工具", True):
+            if imgui.menu_item("关于"):
+                self.show_message_box("Luna Editor 0.1", "made by Isak Wong, Pancy Star")
+            imgui.end_menu()
+
+    def on_imgui(self, delta_time) -> None:
+        super().on_imgui(delta_time)
+        if imgui.begin_menu_bar():
+            self.on_file_menu()
+            self.on_tool_menu()
+            self.on_help_menu()
+            imgui.end_menu_bar()
diff --git a/editor/ui/panel.py b/editor/ui/panel.py
index 9cf1d4b..dafd287 100644
--- a/editor/ui/panel.py
+++ b/editor/ui/panel.py
@@ -1,16 +1,137 @@
 import luna
+from luna import imgui
+
+
+class WindowBase(object):
+    editor_list: 'list[PanelBase]'
+    id = 1
+
+    def __init__(self):
+        super().__init__()
+        self.width = 1
+        self.height = 1
+        self.title = "###Luna Editor"
+        self.id = WindowBase.id
+        WindowBase.id = WindowBase.id + 1
+        self.editor_list = []
+
+        self.view_pos = luna.LVector2f(0, 0)
+
+        self._status_show_time = 0.5
+        self._status_destroy_time = 4.0
+        self._status_time = 0
+        self._status_msg = ""
+        self._status_open = False
+
+        self._dialog_min = luna.LVector2f(400, 200)
+        self._dialog_open = False
+        self._dialog_msg = ""
+        self._dialog_title = "Title"
+
+    def show_box(self, title, callback):
+        pass
+
+    def show_message_box(self, title, msg):
+        self._dialog_title = title
+        self._dialog_open = True
+        self._dialog_msg = msg
+
+    def on_simple_mb(self):
+        imgui.set_next_window_size(self._dialog_min, 0)
+        view_pos = self.view_pos
+        view_pos.x += self.width / 2.0
+        view_pos.y += self.height / 2.0
+        imgui.set_next_window_pos(view_pos, imgui.ImGuiCond_Always, luna.LVector2f(0.5, 0.5))
+        show, is_open = imgui.begin_popup_modal(self._dialog_title, self._dialog_open, 0)
+        if show:
+            imgui.text(self._dialog_msg)
+            imgui.end_popup()
+        self._dialog_open = is_open
+        if self._dialog_open:
+            imgui.open_popup(self._dialog_title, 0)
+
+    def show_status(self, msg):
+        self._status_time = 0
+        self._status_open = True
+        self._status_msg = msg
+
+    def on_title(self):
+        self.title = self.title
+
+    def do_imgui(self, delta_time):
+        self.on_title()
+        window_module = luna.get_module(luna.WindowModule)
+        main_window = window_module.main_window
+        size = luna.LVector2f(main_window.width, main_window.height)
+        imgui.set_next_window_size(size, 0)
+        main_viewport = imgui.get_main_viewport_id()
+        self.view_pos = imgui.get_viewport_pos(main_viewport)
+        imgui.set_next_window_pos(self.view_pos, 0, luna.LVector2f(0, 0))
+        exiting = False
+
+        imgui.push_style_vec2(imgui.ImGuiStyleVar_FramePadding, luna.LVector2f(16, 8))
+        flags = imgui.ImGuiWindowFlags_MenuBar \
+                | imgui.ImGuiWindowFlags_NoCollapse \
+                | imgui.ImGuiWindowFlags_NoBringToFrontOnFocus \
+                | imgui.ImGuiWindowFlags_NoMove
+        imgui.set_next_window_viewport(main_viewport)
+        exiting = not imgui.begin(self.title, flags, True)
+        self.on_imgui(delta_time)
+        imgui.pop_style_var(1)
+        imgui.dock_space(self.id, luna.LVector2f(0, 0), imgui.ImGuiDockNodeFlags_PassthruCentralNode)
+
+        for editor in self.editor_list:
+            editor.do_imgui(delta_time)
+
+        imgui.end()
+        imgui.set_next_window_dock_id(1, imgui.ImGuiCond_FirstUseEver)
+        if exiting:
+            luna.exit()
+
+    def on_imgui(self, delta_time):
+        vmax = imgui.get_window_content_max()
+        vmin = imgui.get_window_content_min()
+        self.width = vmax.x - vmin.x
+        self.height = vmax.y - vmin.y
+
+        if self._status_open:
+            self._status_time += delta_time
+            width = 300
+            height = 100
+            pos_x = self.width - width
+            if self._status_time < self._status_show_time:
+                pos_y = self.height - height * self._status_time / self._status_show_time
+            else:
+                pos_y = self.height - height
+            imgui.set_next_window_pos(luna.LVector2f(pos_x, pos_y), 0, luna.LVector2f(0, 0))
+            imgui.set_next_window_size(luna.LVector2f(width, height), 0)
+            if self._status_time > self._status_destroy_time:
+                self._status_open = False
+
+        if self._status_open:
+            imgui.begin("Status",
+                        imgui.ImGuiWindowFlags_NoCollapse | imgui.ImGuiWindowFlags_NoTitleBar | imgui.ImGuiWindowFlags_NoInputs)
+            imgui.text(self._status_msg)
+            imgui.end()
+
+        self.on_simple_mb()
 
 
 class PanelBase(object):
-	def __init__(self):
-		self.title = "Panel"
-		self.width = 100
-		self.height = 100
-
-	def on_imgui(self):
-		pass
-
-	def do_imgui(self):
-		luna.imgui.begin(self.title, luna.imgui.ImGuiWindowFlags_NoCollapse | luna.imgui.ImGuiWindowFlags_MenuBar, False)
-		self.on_imgui()
-		luna.imgui.end()
\ No newline at end of file
+    def __init__(self):
+        self.title = "Panel"
+        self.width = 1
+        self.height = 1
+        self.has_menu = False
+
+    def on_imgui(self, delta_time):
+        vmax = imgui.get_window_content_max()
+        vmin = imgui.get_window_content_min()
+        self.width = vmax.x - vmin.x
+        self.height = vmax.y - vmin.y
+
+    def do_imgui(self, delta_time):
+        luna.imgui.begin(self.title, luna.imgui.ImGuiWindowFlags_NoCollapse | luna.imgui.ImGuiWindowFlags_MenuBar,
+                         False)
+        self.on_imgui(delta_time)
+        luna.imgui.end()
diff --git a/editor/ui/scene_panel.py b/editor/ui/scene_panel.py
index af2c054..f58881b 100644
--- a/editor/ui/scene_panel.py
+++ b/editor/ui/scene_panel.py
@@ -10,7 +10,7 @@ class ScenePanel(PanelBase):
     scene: luna.Scene
 
     def __init__(self) -> None:
-        super(ScenePanel, self).__init__()
+        super().__init__()
         self.title = "Scene"
         self.scene = None
         self.has_menubar = True
@@ -97,8 +97,8 @@ class ScenePanel(PanelBase):
                 luna.imgui.end_menu()
             luna.imgui.end_menu_bar()
 
-    def on_imgui(self) -> None:
-        super(ScenePanel, self).on_imgui()
+    def on_imgui(self, delta_time) -> None:
+        super().on_imgui(delta_time)
         content = luna.imgui.get_content_region_avail()
         vmin = imgui.get_window_content_min()
         vmax = imgui.get_window_content_max()
diff --git a/layout.ini b/layout.ini
new file mode 100644
index 0000000..1511043
--- /dev/null
+++ b/layout.ini
@@ -0,0 +1,89 @@
+[Window][场景树]
+Pos=8,76
+Size=326,408
+Collapsed=0
+DockId=0x00000004,0
+
+[Window][Debug##Default]
+Pos=60,60
+Size=400,400
+Collapsed=0
+
+[Window][Editor]
+Pos=60,60
+Size=45,76
+Collapsed=0
+
+[Window][资源库]
+Pos=8,486
+Size=326,406
+Collapsed=0
+DockId=0x00000005,0
+
+[Window][Inspector]
+Pos=1236,76
+Size=356,816
+Collapsed=0
+DockId=0x00000007,0
+
+[Window][Demo]
+Pos=336,681
+Size=898,211
+Collapsed=0
+DockId=0x0000000B,1
+
+[Window][Dear ImGui Demo]
+Pos=336,681
+Size=898,211
+Collapsed=0
+DockId=0x0000000B,0
+
+[Window][Luna Editor]
+Size=1600,900
+Collapsed=0
+
+[Window][Scene]
+Pos=336,76
+Size=898,603
+Collapsed=0
+DockId=0x00000008,0
+
+[Window][  Luna Editor		F:/Lunar-GameEngine/Lunar-Default-Demo		/assets/test.scn]
+Size=1600,900
+Collapsed=0
+
+[Window][  Luna Editor				/assets/test.scn]
+Size=1600,900
+Collapsed=0
+
+[Window][提示]
+Pos=592,308
+Size=400,200
+Collapsed=0
+
+[Window][  Luna Editor				]
+Pos=0,0
+Size=1600,900
+Collapsed=0
+
+[Window][Luna Editor 0.1]
+Pos=701,416
+Size=197,68
+Collapsed=0
+
+[Window][Status]
+Pos=1124,626
+Size=300,100
+Collapsed=0
+
+[Docking][Data]
+DockSpace       ID=0x00000001 Window=0x87ADC79E Pos=168,166 Size=1584,816 Split=X
+  DockNode      ID=0x00000002 Parent=0x00000001 SizeRef=326,854 Split=Y Selected=0x7A1CCB16
+    DockNode    ID=0x00000004 Parent=0x00000002 SizeRef=326,427 Selected=0x7A1CCB16
+    DockNode    ID=0x00000005 Parent=0x00000002 SizeRef=326,425 Selected=0xCC40BDAC
+  DockNode      ID=0x00000003 Parent=0x00000001 SizeRef=1256,854 Split=X
+    DockNode    ID=0x00000006 Parent=0x00000003 SizeRef=898,854 Split=Y Selected=0xFFEA1EA4
+      DockNode  ID=0x00000008 Parent=0x00000006 SizeRef=836,214 CentralNode=1 Selected=0xE192E354
+      DockNode  ID=0x0000000B Parent=0x00000006 SizeRef=836,211 Selected=0xE87781F4
+    DockNode    ID=0x00000007 Parent=0x00000003 SizeRef=356,854 Selected=0xE7039252
+
diff --git a/src/core/Scripting/binding_traits.h b/src/core/Scripting/binding_traits.h
index eb57fb4..7dd0c79 100644
--- a/src/core/Scripting/binding_traits.h
+++ b/src/core/Scripting/binding_traits.h
@@ -188,9 +188,9 @@ struct binding_converter<int>
 
 	inline static int from_binding(PyObject* obj)
 	{
-		LUNA_ASSERT(PyLong_Check(obj));
-		long res = PyLong_AsLong(obj);
-		return res;			
+		if(PyObject_TypeCheck(obj, &PyLong_Type))
+			return PyLong_AsLong(obj);
+		return 0;			
 	}
 
 	static const char* binding_fullname()
@@ -406,8 +406,9 @@ struct binding_converter<float>
 
 	inline static float from_binding(PyObject* obj)
 	{
-		float res = (float)PyFloat_AsDouble(obj);
-		return res;
+		if(PyObject_TypeCheck(obj, &PyFloat_Type))
+			return (float)PyFloat_AsDouble(obj);
+		return 0.0;
 	}
 	static const char* binding_fullname()
 	{
@@ -424,9 +425,9 @@ struct binding_converter<unsigned int>
 	}
 	inline static unsigned int from_binding(PyObject* obj)
 	{
-		LUNA_ASSERT(PyLong_Check(obj));
-		unsigned int res = PyLong_AsLong(obj);
-		return res;
+		if(PyObject_TypeCheck(obj, &PyLong_Type))
+			return PyLong_AsLong(obj);		
+		return 0;
 	}
 	static const char* binding_fullname()
 	{
@@ -456,7 +457,9 @@ struct binding_converter<uint64_t>
 	}
 	inline static uint64_t from_binding(PyObject* val)
 	{
-		return PyLong_AsSize_t(val);
+		if (PyObject_TypeCheck(val, &PyLong_Type))
+			return PyLong_AsSize_t(val);
+		return 0;
 	}
 	static const char* binding_fullname()
 	{
diff --git a/src/core/Scripting/function_wrap.h b/src/core/Scripting/function_wrap.h
index df0d655..c984ae2 100644
--- a/src/core/Scripting/function_wrap.h
+++ b/src/core/Scripting/function_wrap.h
@@ -148,7 +148,7 @@ LString method_doc(const char* name)
 	LString format;
 	LString return_name = "None";
 	if constexpr (!std::is_same_v<return_type, void>)
-		return_name = binding_converter<return_type>::binding_fullname();
+		return_name = binding_converter< std::remove_cvref_t<return_type>>::binding_fullname();
 	if constexpr (function_traits<FN>::args_count != 0)
 	{
 		LString res = detail::args_traits_impl<args_type, function_traits<FN>::args_count>::args_name();
@@ -169,7 +169,7 @@ LString static_method_doc(const char* name)
 	using args_type = function_traits<FN>::args_type;
 	LString return_name = "None";
 	if constexpr (!std::is_same_v<return_type, void>)
-		return_name = binding_converter<return_type>::binding_fullname();
+		return_name = binding_converter< std::remove_cvref_t<return_type>>::binding_fullname();
 	LString format;
 	if constexpr (function_traits<FN>::args_count != 0)
 	{
diff --git a/src/core/Framework/luna_core.cpp b/src/core/Framework/luna_core.cpp
index e195539..3e3e619 100644
--- a/src/core/Framework/luna_core.cpp
+++ b/src/core/Framework/luna_core.cpp
@@ -24,9 +24,9 @@ LModule* PyGetModule(LType* type)
 	return gEngine->GetModule(type); 
 };
 
-LModule* PyLoadModule(LModule* m)
+LModule* PyAddModule(LModule* m)
 {
-	return gEngine->LoadModule(m);
+	return gEngine->AddModule(m);
 };
 
 
@@ -53,7 +53,7 @@ LunaCore* LunaCore::CreateLunaCore()
 	gEngine = new LunaCore();
 	gEngine->LoadModule<PlatformModule>();
 	BindingModule::Luna()->AddMethod<&PyGetModule>("get_module").ml_doc = LString::MakeStatic("def get_module(t: Type[T]) -> T:\n\tpass\n");
-	BindingModule::Luna()->AddMethod<&PyLoadModule>("load_module").ml_doc = LString::MakeStatic("def load_module(t: Type[T]) -> T:\n\tpass\n");
+	BindingModule::Luna()->AddMethod<&PyAddModule>("add_module").ml_doc = LString::MakeStatic("def load_module(t: Type[T]) -> T:\n\tpass\n");
 
 	BindingModule::Luna()->AddMethod<&Exit>("exit");
 
@@ -72,7 +72,7 @@ void LunaCore::Run()
 
 }
 
-LModule* LunaCore::LoadModule(LModule* m)
+LModule* LunaCore::AddModule(LModule* m)
 {
 	LType* type = m->GetClass();
 	luna::LString name = type->GetName();
diff --git a/src/core/Framework/luna_core.h b/src/core/Framework/luna_core.h
index 58801c5..2ab86c6 100644
--- a/src/core/Framework/luna_core.h
+++ b/src/core/Framework/luna_core.h
@@ -22,10 +22,10 @@ public:
 	{
 		LType* type = LType::Get<T>();
 		LModule* m = type->NewInstance<LModule>();
-		return LoadModule(m);
+		return AddModule(m);
 	}
 
-	LModule* LoadModule(LModule* m);
+	LModule* AddModule(LModule* m);
 
 	void OnRender();
 
diff --git a/src/core/Math/math_binding.cpp b/src/core/Math/math_binding.cpp
index 35960ce..2616993 100644
--- a/src/core/Math/math_binding.cpp
+++ b/src/core/Math/math_binding.cpp
@@ -75,6 +75,13 @@ void normarlize(PyObject* obj)
 	return t->val.normalize();
 }
 
+
+template<typename T>
+T zero()
+{
+	return T::Zero();
+}
+
 RegisterType_Imp(LVector2f, LVector2f)
 {
 	cls->Binding<LVector2f>();
@@ -89,6 +96,7 @@ RegisterType_Imp(LVector2f, LVector2f)
 
 	cls->BindingMethod<&get_size<LVector2f>>("size");
 	cls->BindingMethod<&normarlize<LVector2f>>("normalize");
+	cls->BindingMethod<&zero<LVector2f>, MethodType::StaticFunction>("zero");
 	
 	cls->GetExtraDocs().push_back("def __init__(self, x: float, y: float):\n\t\tsuper(LVector2f, self).__init__()");
 	BindingModule::Luna()->AddType(cls);
@@ -112,6 +120,7 @@ RegisterType_Imp(LVector3f, LVector3f)
 
 	cls->BindingMethod<&get_size<LVector3f>>("size");
 	cls->BindingMethod<&normarlize<LVector3f>>("normalize");
+	cls->BindingMethod<&zero<LVector3f>, MethodType::StaticFunction>("zero");
 	
 	cls->GetExtraDocs().push_back("def __init__(self, x: float, y: float, z: float):\n\t\tsuper(LVector3f, self).__init__()");
 	BindingModule::Luna()->AddType(cls);
diff --git a/src/imgui_binding/imgui_binding.cpp b/src/imgui_binding/imgui_binding.cpp
index aee5bc9..0c3ee7d 100644
--- a/src/imgui_binding/imgui_binding.cpp
+++ b/src/imgui_binding/imgui_binding.cpp
@@ -321,12 +321,30 @@ void PyDockSpace(ImGuiID id, const ImVec2& size /* = ImVec2(0, 0) */, ImGuiDockN
 	ImGui::DockSpace(id, size, flags);	
 }
 
+unsigned int GetMainViewportID()
+{
+	return ImGui::GetMainViewport()->ID;
+}
+
+ImVec2 GetViewportPos(ImGuiID id)
+{
+	auto viewport = ImGui::FindViewportByID(id);
+	if(viewport)
+		return viewport->Pos;
+	return ImVec2(0, 0);
+}
+
+unsigned int PyGetWindowViewport()
+{
+	return ImGui::GetWindowViewport()->ID;
+}
+
+
 #define AddIMGUIConstant(name) imguiModule->AddConstant(#name, name);
 
 STATIC_INIT(imgui)
 {
 		BindingModule* imguiModule = BindingModule::Get("luna.imgui");
-
 		//Cond
 		AddIMGUIConstant(ImGuiCond_Always);
 		AddIMGUIConstant(ImGuiCond_FirstUseEver);
@@ -431,9 +449,13 @@ STATIC_INIT(imgui)
 			ImGui::ShowDemoWindow(nullptr);
 		}>("show_demo_window");
 
-		imguiModule->AddMethod<&PyBegin> ("begin");
+		imguiModule->AddMethod<&PyBegin>("begin");
 		imguiModule->AddMethod<&ImGui::End>("end");
 
+		imguiModule->AddMethod<(bool(*)(const char* , const ImVec2& , bool , ImGuiWindowFlags))&ImGui::BeginChild>("begin_child");
+		imguiModule->AddMethod<&ImGui::EndChild>("end_child");
+		
+
 		imguiModule->AddMethod<&ImGui::GetWindowContentRegionMin> ("get_window_content_min");
 		imguiModule->AddMethod<&ImGui::GetWindowContentRegionMax>("get_window_content_max");
 		
@@ -489,6 +511,7 @@ STATIC_INIT(imgui)
 		imguiModule->AddMethod<&ImGui::BeginDragDropTarget>("begin_drag_drop_target");
 		imguiModule->AddMethod<&ImGui::EndDragDropTarget>("end_drag_drop_target");
 		imguiModule->AddMethod<&ImGui::AcceptDragDropPayload>("accept_drag_drop_payload");
+		
 				
 		imguiModule->AddMethod<&PySetDragDropPayload>("set_drag_drop_payload");
 
@@ -498,14 +521,21 @@ STATIC_INIT(imgui)
 
 		imguiModule->AddMethod<&ImGui::SetNextWindowSize>("set_next_window_size");
 		imguiModule->AddMethod<&ImGui::SetNextWindowPos>("set_next_window_pos");
+		imguiModule->AddMethod<&GetMainViewportID>("get_main_viewport_id");
+		imguiModule->AddMethod<&GetViewportPos>("get_viewport_pos");
+		imguiModule->AddMethod<&PyGetWindowViewport>("get_window_viewport");
 		imguiModule->AddMethod<&ImGui::SetNextWindowDockID>("set_next_window_dock_id");
+		imguiModule->AddMethod<&ImGui::SetNextWindowViewport>("set_next_window_viewport");
+
 		imguiModule->AddMethod<&PyDockSpace>("dock_space");
 
 		imguiModule->AddMethod<&ImGui::GetCursorPos>("get_cursor_pos");		
 
-		imguiModule->AddMethod<(void(*)(int, float))&ImGui::PushStyleVar>("push_style_float");
+		imguiModule->AddMethod<(void(*)(int, float))& ImGui::PushStyleVar>("push_style_float");
+		imguiModule->AddMethod<(void(*)(int, const ImVec4&))& ImGui::PushStyleColor>("push_style_color");
 		imguiModule->AddMethod<(void(*)(int, const ImVec2&))& ImGui::PushStyleVar>("push_style_vec2");
 		imguiModule->AddMethod<&ImGui::PopStyleVar>("pop_style_var");
+		imguiModule->AddMethod<&ImGui::PopStyleColor>("pop_style_color");
 
 		imguiModule->Init();
 
diff --git a/src/Graphics/render_module.cpp b/src/Graphics/render_module.cpp
index ac18278..40bb121 100644
--- a/src/Graphics/render_module.cpp
+++ b/src/Graphics/render_module.cpp
@@ -107,7 +107,7 @@ void RenderModule::SetupIMGUI()
 	io.Fonts->AddFontFromMemoryTTF((void*)data3->GetData().data(), (int)data3->GetData().size(), 16.0f, &config,
 		icon_ranges);
 	//ImGui::PushFont(font);
-	io.ConfigFlags = io.ConfigFlags | ImGuiConfigFlags_DockingEnable;
+	io.ConfigFlags = io.ConfigFlags | ImGuiConfigFlags_DockingEnable | ImGuiConfigFlags_ViewportsEnable;
 	(void)io;
 
 	io.IniFilename = nullptr;
@@ -344,6 +344,13 @@ void RenderModule::Tick(float delta_time)
 	//Engine IMGUI End
 	ImGui::Render();
 
+	auto& io = ImGui::GetIO();
+	if (io.ConfigFlags & ImGuiConfigFlags_ViewportsEnable)
+	{
+		ImGui::UpdatePlatformWindows();
+		ImGui::RenderPlatformWindowsDefault();
+	}
+
 	RenderIMGUI();
 
 
-- 
2.38.1.windows.1

