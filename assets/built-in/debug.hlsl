////////////////////////////////////////////////////////////////////////////////
// Filename: depth.vs
////////////////////////////////////////////////////////////////////////////////
#include "assets/built-in/SharedCBuffer.hlsl"

//////////////
// TYPEDEFS //
//////////////

////////////////////////////////////////////////////////////////////////////////
// Vertex Shader
////////////////////////////////////////////////////////////////////////////////
BaseFragment VSMain(BaseVertex input, uint inst : SV_InstanceID) 
{
    BaseFragment output;    
    
	// Change the position vector to be 4 units for proper matrix calculations.
    

	// Calculate the position of the vertex against the world, view, and projection matrices.
    output.position = mul(float4(input.position, 1.0f), objectBuffers[inst].worldMatrix);
    output.position = mul(output.position, viewMatrix);
    output.position = mul(output.position, projectionMatrix);
    output.normal = mul(float4(input.normal, inst), objectBuffers[inst].worldMatrix);
    output.color = input.color;
	return output;
}

////////////////////////////////////////////////////////////////////////////////
// Filename: depth.ps
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 PSMain(BaseFragment input) : SV_TARGET
{
    float f = saturate(dot(input.normal, lightDirection));
	return input.color * f;
}
